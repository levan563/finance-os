import Foundation

class TransactionStorage {
    private let key = "transactions"

    func saveTransactions(_ transactions: [Transaction]) {
        do {
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ UserDefaults. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: \(transactions.count)")
            transactions.forEach { print("üîπ \($0.store) - \($0.amount)‚ÇΩ - \( $0.date) (ID: \($0.id))") }

            let data = try JSONEncoder().encode(transactions)

            // üî• –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            UserDefaults.standard.removeObject(forKey: "transactions")
            UserDefaults.standard.synchronize()  // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ

            // üî• –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º!
            if transactions.isEmpty {
                print("‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, UserDefaults –æ—Å—Ç–∞—ë—Ç—Å—è –ø—É—Å—Ç—ã–º.")
                return
            }

            // üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç
            UserDefaults.standard.set(data, forKey: "transactions")
            UserDefaults.standard.synchronize()

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
        }
    }




    func loadTransactions() -> [Transaction] {
        if let data = UserDefaults.standard.data(forKey: "transactions") {
            do {
                let transactions = try JSONDecoder().decode([Transaction].self, from: data)
                print("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: \(transactions.count)")
                transactions.forEach { print("üîπ \($0.store) - \($0.amount)‚ÇΩ - \( $0.date) (ID: \($0.id))") }
                return transactions
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
            }
        }
        return []
    }

}
